# This workflow will triage pull requests and apply a label based on the
# paths that are modified in the pull request.
#
# To use this workflow, you will need to set up a .github/labeler.yml
# file with configuration.  For more information, see:
# https://github.com/actions/labeler

name: Build all
run-name: ${{ github.actor }} is building all apps
on: push

jobs:
  # create-release:
  #   permissions: write-all
  #   runs-on: ubuntu-latest
  #   outputs:
  #       upload_url: ${{ steps.create_release.outputs.upload_url }}
  #   steps:
  #       - name: Create GitHub Release
  #         id: create_release
  #         uses: actions/create-release@v1
  #         with:
  #             tag_name: "release-${{ github.run_number }}"
  #             release_name: "test release #${{ github.run_number }}"
  #             draft: true
  #             prerelease: false
  #         env:
  #             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  
  # build-vite-server:
  
  #   runs-on: windows-latest
  #   permissions:
  #     contents: write
  #     pull-requests: write
  #   needs: create-release

  #   steps:
  #   - name: Checkout Ecofloc
  #     uses: actions/checkout@v4
  #     with:
  #       repo-token: "${{ secrets.GITHUB_TOKEN }}"
  #   - name: Building vite-server
  #     run: echo Now Building vite-server
  #   - name: Install Node
  #     uses: actions/setup-node@v4
  #   - name: install pkg
  #     run: npm install -g pkg
  #   - name: build vite-server.exe
  #     working-directory: ecofloc-UI
  #     run: pkg start.js --targets node18-win-x64 --output ../vite-server.exe
  #   - name: Upload build artifact to release
  #     uses: actions/upload-release-asset@v1
  #     env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #         upload_url: ${{ needs.create-release.outputs.upload_url }}
  #         asset_path: ./vite-server.exe
  #         asset_name: vite-server.exe
  #         asset_content_type: application/exe
          
  # build-ecofloc4win:
  #   runs-on: windows-latest
  #   permissions:
  #     contents: write
  #     pull-requests: write
  #   # needs: create-release
    
  #   steps:
  #     - name: Checkout Ecofloc
  #       uses: actions/checkout@v4
  #       with:
  #         repo-token: "${{ secrets.GITHUB_TOKEN }}"
  #     - name: Building Ecofloc4win
  #       working-directory: ecofloc-UI
  #       run: echo Now Building ecofloc4win
  #     - name: Seting up cl, msbuild, vcpkg (txui) and cuda
  #       run: echo "Setting everything up"
  #     - name: Installing cl compiler
  #       uses: ilammy/msvc-dev-cmd@v1.4.1
  #     - name: Installing msbuild
  #       uses: microsoft/setup-msbuild@v2
  #     - name: Installing additional packages
  #       run: vcpkg install
  #     - name: Installing CUDA
  #       uses: Jimver/cuda-toolkit@v0.2.21
  #       id: cuda-toolkit
  #       with:
  #         cuda: '11.7.0'
  #         non-cuda-sub-packages: '["libnvml"]'
  #     - name: Setup dotnet
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: '8.0.405'
  #     # - name: Moving vcpkg to ecofloc4win
  #     #   run: cp -r .\vcpkg_installed\ .\ecofloc4win\
  #     - name: Compile Ecofloc4Win
  #       run: msbuild /t:Restore .\ecofloc4win.sln
  #     - name: wait 5 seconde connard
  #       run: sleep 5
  #     - name: Compile Ecofloc4Win
  #       run: msbuild /p:Configuration=Release .\ecofloc4win.sln
  #     - name: wait 5 seconde connard
  #       run: sleep 5
  #     - name: check the directory content
  #       run: dir -Recurse
  #     - name: Upload build artifact to release
  #       uses: actions/upload-release-asset@v1
  #       env:
  #           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #           upload_url: ${{ needs.create-release.outputs.upload_url }}
  #           asset_path: ./ecofloc4win.exe
  #           asset_name: ecofloc4win.exe
  #           asset_content_type: application/exe
  
  # build-PIDRecup:
  #   runs-on: windows-latest
  #   permissions:
  #     contents: write
  #     pull-requests: write
  #   # needs: create-release

  #   steps:
  #     - name: Checkout Ecofloc
  #       uses: actions/checkout@v4
  #       with:
  #         repo-token: "${{ secrets.GITHUB_TOKEN }}"
  #     - name: Building PidRecup
  #       run: echo Now Building ecofloc4win
  #     - name: Installing cl compiler
  #       uses: ilammy/msvc-dev-cmd@v1.4.1
  #     - name: Installing msbuild
  #       uses: microsoft/setup-msbuild@v2
  #     - name: Compile PIDRecup
  #       working-directory: PIDRecup/PIDRecup
  #       run: msbuild /property:Configuration=Release .\PIDRecup.vcxproj
  #     - name: check the directory content
  #       run: dir -Recurse
        
  build-EcoflocConfigurator:
    runs-on: windows-latest
    permissions:
      contents: write
      pull-requests: write
    # needs: create-release

    steps:
      - name: Checkout Ecofloc
        uses: actions/checkout@v4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.405'
      - name: Installing msbuild
        uses: microsoft/setup-msbuild@v2
      - name: Config to use the correct .NET sdk
        working-directory: EcoflocConfigurator
        run: dotnet new globaljson --sdk-version 8.0.405
      - name: Install dependencies
        working-directory: EcoflocConfigurator
        run: dotnet restore
      # - name: Build
      #   working-directory: EcoflocConfigurator
      #   run: dotnet build
      # - name: check the directory content
      #   run: dir -Recurse
      - name: dotnet info
        working-directory: EcoflocConfigurator
        run: dotnet --info
      - name: Compile EcoflocConfigurator
        working-directory: EcoflocConfigurator
        run: msbuild /property:Configuration=Release .\EcoflocConfigurator.csproj
      - name: check the directory content
        run: dir -Recurse
    
  # build-wrapper:
  #   runs-on: windows-latest
  #   permissions:
  #     contents: write
  #     pull-requests: write
  #   # needs: create-release
    
  #   steps:
  #     - name: Checkout Ecofloc
  #       uses: actions/checkout@v4
  #       with:
  #         repo-token: "${{ secrets.GITHUB_TOKEN }}"
  #     - name: Building Wrapper
  #       working-directory: ecofloc-UI
  #       run: echo Now Building ecofloc4win
  #     - name: Seting up cl, msbuild
  #       run: echo "Setting everything up"
  #     - name: Installing cl compiler
  #       uses: ilammy/msvc-dev-cmd@v1.4.1
  #     - name: Installing msbuild
  #       uses: microsoft/setup-msbuild@v2
  #     - name: Setup dotnet
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: '8.0.405'
  #     # - name: Install dependencies
  #     #   working-directory: Wrapper
  #     #   run: dotnet restore
  #     - name: Compile Wrapper
  #       working-directory: Wrapper
  #       run: msbuild /property:Configuration=Release /t:Restore .\Wrapper.vcxproj
  #     - name: check the directory content
  #       run: dir -Recurse
  #     # - name: Upload build artifact to release
  #     #   uses: actions/upload-release-asset@v1
  #     #   env:
  #     #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     #   with:
  #     #       upload_url: ${{ needs.create-release.outputs.upload_url }}
  #     #       asset_path: ./ecofloc4win.exe
  #     #       asset_name: ecofloc4win.exe
  #     #       asset_content_type: application/exe

  # create-installer:
  #   runs-on: windows-latest
  #   permissions:
  #     contents: write
  #     pull-requests: write
  #   needs: [build-PIDRecup, build-ecofloc4win, build-vite-server, build-EcoflocConfigurator]

  #   steps:
  #     - name: Kek
  #       run: echo "hello world"
